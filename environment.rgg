import java.io.*;
import static parameters.*;
import static initiation.*;
import static modules_base.*;
import static modules_organs.*;
import static modules_soil.*;



// weather
static double tav;
static double tmax;
static double tmin;
static double tamp;
static double tavYear;
static double rain;
static double srad;
static double rh;
static double wind;
static double tdew;
static double CO2 = 400.;

static double et0;		// inputed reference evapotranspiration mm/d
static double irrig;
static double snow; // added as state variable but not calculated

static void calcTemp() {				// calculates average daily temperature parameterized for Piracicaba (should read input data) (Vianna, 2016)
	double tmaxWeight = 0.5;
	tmax = 33.02 + 4.00 * Math.sin(2*Math.PI*(dayOfYear-282)/365);
	tmin = 13.53 + 3.20 * Math.sin(2*Math.PI*(dayOfYear-270)/365);
	tav = tmaxWeight * tmax + (1-tmaxWeight) * tmin;
}

static void updateWeather(){
	
	if(UseTemp){
	tmax	= WeatherData[dayOfYear-1][2];
	tmin	= WeatherData[dayOfYear-1][3];
	tav		= (tmax + tmin) / 2.;
	}else{
	calcTemp();
	}
	
	rain	= WeatherData[dayOfYear-1][4];
	srad	= WeatherData[dayOfYear-1][5];
	rh		= WeatherData[dayOfYear-1][6];
	wind	= WeatherData[dayOfYear-1][7] * 86.4; // wind speed converted to km/d
	et0		= WeatherData[dayOfYear-1][8];
	
	tdew	= calc_tdew();
	
	if(irrigation){
	irrig	= WeatherData[dayOfYear-1][7];
	}
}



// light model
static double rfrIncoming				= 1.2;				// red/far-red ratio of the incoming radiation
static int depth						= 10;				// maximum number of reflections / transmissions of a ray
static LightModel lm					= new LightModel(2500000, depth);
static FluxLightModel flm				= new FluxLightModel(20000000, depth);

// setup of light sources (45, 90)
const float ToRadians					= Math.PI/180;		// conversion factor degrees to radians
const float ToDegree					= 180/Math.PI;		// conversion factor radians to degrees
const float Transmissivity				= 0.5277;			// based on Qg data 30 years' mean Piracicaba; percentage of light that transmitted through atmosphere on a day of clear sky (Netherlands = 0.3548 for Qo in basis of daylength)
const float k_Har    					= 0.1512;           // Hargreavs 
const float FractionDiffuseLightDaily	= 0.8;				//1.33 - 1.46*0.3548 // fraction of diffuse light in the total radiation on a day of clear sky  Spitter 1986
const float tilt						= 23.45*ToRadians;	// tilt of the earth axis
const float c_rad						= 0.4; 				// parameter for collecting radiation transition related with elevation angle Spitter 1986
const int n								= 24;				// number of direct light sources during the day
const float c							= 3e8;				// Speed of light in vacuum (m s-1)
const float planck						= 6.63*10**-34;     // Planck constant (J -s)
const float lambda						= 482;				// most emitted sunbeams frequency (nm) 
const float avogadro					= 6.023 * 10**23;   // Avogadro number
static float[][] betaAzimSdr			= new float[3][];	// row 1 solar elevation beta; row 2 solar azimuth; and row 3 direct light

// calculations of daily solar radiation based on latitude and DOY 
static double dayLength;									// Day length (hours)
static double decl;											// Solar declination based on earth tilt and DOY (Decimal Degrees)
static double hn;                   						// Hourly angle of sunrise (Decimal Degrees)
static double earth_sun;									// Earth-sun distance correction
static double Qo;											// Extraterrestrial solar radiation MJ m-2 d-1 (24h basis)
static double Qg;											// Solar global radiation MJ m-2 d-1
static float DailyDiffuseRadiation;
static float globalRadiationIntensity;						// total incoming radiation from all directions at the horizontal plane
static float PPFD;											// photosynthetic photon flux density in umol/m2/s
static float e;												// Energy of an especific wavelength

static void updateIncomingLight() {
	betaAzimSdr = getRadiation(dayOfYear, latitude, n);
	globalRadiationIntensity = /*0.7**/betaAzimSdr[2][n] ;
	PPFD = 1e6 * 0.55 * 4.55 * globalRadiationIntensity / (dayLength*60*60);
	DailyDiffuseRadiation = /*0.7**/betaAzimSdr[2][n+1];	
	
	//betaAzimSdr = getRadiation(dayOfYear, latitude, n);
	//globalRadiationIntensity = /*0.7**/betaAzimSdr[2][n] ;
	//e = (planck * c) / (lambda * 1e-9); 										// Energy of an especific wavelength (j photon-1)
	//PPFD = (globalRadiationIntensity * (1e6/86400))/(e*avogadro) * 1e6;			// Solar radiation (24h basis) in W m-2 (mmol m-2 -s)
	//PPFD = 1e6 * 0.55 * 4.55 * globalRadiationIntensity / (dayLength*60*60);
	//DailyDiffuseRadiation = /*0.7**/betaAzimSdr[2][n+1];
}

//BufferedReader in = new BufferedReader(new FileReader("<Filename>"));

/*private static void readFile(String fileName) {
       try {
         File file = new File(fileName);
         Scanner scanner = new Scanner(file);
         while (scanner.hasNextLine()) {
           System.out.println(scanner.nextLine());
         }
         scanner.close();
       } catch (FileNotFoundException e) {
         e.printStackTrace();
       }
     }*/
     
//Path file = "C:/Murilo/DOUTORADO/WUR/Plant_Architecture/Input/Input_test.txt";
//byte[10] fileArray;
//fileArray = Files.readAllBytes(file);



static void calcDayLength() {
	
	decl = 23.45 * Math.sin(ToRadians * (360. * (dayOfYear - 80.) / 365.));
	hn = Math.acos(-Math.tan(ToRadians * (latitude/ ToRadians)) * Math.tan(ToRadians * decl)) * ToDegree;
	dayLength = hn * 2./15.;
	earth_sun = 1 + 0.033 * Math.cos((360./365.) * dayOfYear * ToRadians);
	Qo = (118.11/Math.PI) * earth_sun * (ToRadians * hn * Math.sin(ToRadians*(latitude/ ToRadians)) * 
	Math.sin(ToRadians * decl) + Math.cos(ToRadians*(latitude/ ToRadians)) * Math.cos(ToRadians*decl) * Math.sin(ToRadians * hn));
	Qg = Qo * Transmissivity; 
	
}

// solar azimuth angle
static float[][] getRadiation(int dayOfYear, float latitude, int n) {
	//daily parameters
    float eccentricity =  1+0.033*Math.cos(2*Math.PI*(dayOfYear-10)/365);  // the position of the earth during the year
    //println("ecc = "+eccentricity);
	float sinDelta = -Math.sin(tilt) * Math.cos(2*Math.PI*(dayOfYear+10)/365);
	//println("sinDelta = "+sinDelta);
	float cosDelta = Math.sqrt(1-(sinDelta)**2);  //delta is the declination of the sun with respect to the earth equator
	//println("cosDelta = "+cosDelta);
	float a = Math.sin(latitude)*sinDelta;  // the season-dependent solar shift with respect to the equator
	//println("a = "+a);
	float b = Math.cos(latitude)*cosDelta;  // the season-dependent amlitude of tthe sine of solar height
	//println("b = "+b);
	float dayLength = 12 *(1+(2/Math.PI)*Math.asin(a/b));
	//println("daylength = "+dayLength);
	float tsr = 12 - dayLength/2;			// time of sun rise
	//println("tsr = "+tsr);
	
	decl = 23.45 * Math.sin(ToRadians * (360. * (dayOfYear - 80.) / 365.));
	hn = Math.acos(-Math.tan(ToRadians * (latitude/ ToRadians)) * Math.tan(ToRadians * decl)) * ToDegree;
	dayLength = hn * 2./15.;
	earth_sun = 1 + 0.033 * Math.cos((360./365.) * dayOfYear * ToRadians);
	Qo = (118.11/Math.PI) * earth_sun * (ToRadians * hn * Math.sin(ToRadians*(latitude/ ToRadians)) * 
	Math.sin(ToRadians * decl) + Math.cos(ToRadians*(latitude/ ToRadians)) * Math.cos(ToRadians*decl) * Math.sin(ToRadians * hn));
	//Qg = Qo * Math.sqrt(tmax - tmin) * k_Har; 
		
	
	float IntegralOfDailySinBeta = 3600*(dayLength*(a + c_rad *(a**2 + 0.5 * b**2)) + 
			12/Math.PI * b*(2+ 3 * c_rad *a)* Math.sqrt(1 - a**2 / b**2));   // daily integral of sinbeat take account of the transmission at different angle
			
			
	//float DailyExtraTerrestrialRadiation = 1367 * eccentricity * IntegralOfDailySinBeta/ 1e6; //Daily extraterrestrial solar
	float DailyExtraTerrestrialRadiation = Qo;
	
	float DailyDiffuseRadiation =  FractionDiffuseLightDaily * Transmissivity  * DailyExtraTerrestrialRadiation;
	// hourly parameters
	float timeInterval = dayLength / n * 3600; // Time interval in seconds
	float[] hourAngle = new float[n];
	float[] beta = new float[n];
	float Sg = 0;  // instantaneous light intensity
	float S0 = 1367 * eccentricity/ 1e6;  //instant External radiation
	float S0d = 0;
	float[][] betaAzimSdr = new float[3][];  // row 0 beta; row 1 azimuth; and row 3 direct light in one array
	betaAzimSdr[0] = new float[n];
	betaAzimSdr[1] = new float[n];
	betaAzimSdr[2] = new float[n+2]; // add daily total radiation MJ/m2, daily total at horzontal plane and daily diffuse light
	
	for (int j = 0; j <= n-1; j++) {
		
		hourAngle[j] = 2* Math.PI *(tsr + (j+0.5)*timeInterval/3600 - 12.)/24;
		beta[j] = Math.asin(a + b * Math.cos(hourAngle[j]));
		betaAzimSdr[0][j] = ToDegree * beta[j]; // beta in degree=
		
		if (betaAzimSdr[0][j] < 0) {betaAzimSdr[2][j] = 0;}  // make the morning and afternoon points symetric
		//azimuth
		
		betaAzimSdr[1][j] = ToDegree * Math.acos( Math.min(1.0, (Math.sin(beta[j]) * Math.sin(latitude) - sinDelta)
							/( Math.cos(beta[j]) * Math.cos(latitude)))); // azimuth in degree
		betaAzimSdr[1][j] = (hourAngle[j] > 0)? (180+ betaAzimSdr[1][j])%360
							:(3* 180 - betaAzimSdr[1][j])%360;
		if(hourAngle[j]==0) {betaAzimSdr[1][j] = betaAzimSdr[1][j-1] > 90 ? 180:0;};
		
		//direct light at perpendicular direction, since the light model can account for the solar elevation angle
		Sg = (1+ c_rad * Math.sin(beta[j])) * Transmissivity * DailyExtraTerrestrialRadiation / IntegralOfDailySinBeta;  
		betaAzimSdr[2][j] = (1- FractionDiffuseLightDaily) * Sg * timeInterval; // Direct radiation integrated over delt in MJ/m2
		
		//println("hour = "+hourAngle[j]+"  beta = "+betaAzimSdr[0][j]+" Qg = "+betaAzimSdr[2][j]);
	}
	 //betaAzimSdr[2][n] =  DailyExtraTerrestrialRadiation * Transmissivity; 	 // add daily total radiation at horizontal plane MJ/m2
	 betaAzimSdr[2][n] =  DailyExtraTerrestrialRadiation * Transmissivity; 	 // add daily total radiation at horizontal plane MJ/m2
	 betaAzimSdr[2][n+1] =  DailyDiffuseRadiation; 				// add daily diffuse radiation MJ/m2
	 
	 println("Qg = "+betaAzimSdr[2][n]);
	 println("Qgdifuse = "+betaAzimSdr[2][n+1]);
	 println("Qgdirect = "+betaAzimSdr[2][n]* (1-FractionDiffuseLightDaily));
	return betaAzimSdr;
}



static double eo; 		//Potential evapotranspiration rate (mm/d)
static double eos;		//Potential soil evaporation (mm/d)
static double eop;		//Potential plant transpiration, mm/day 
static double es;		//Actual soil evaporation rate   mm/d
static double ep;		//Actual plant transpiration mm/day	

static double esm;		//Actual mulch evaporation (to be constructed)
static double esf;		//Actual flood evaporation (to be constructed)

// Calculates FAO-56 Penman-Monteith potential evapotranspiration, exactly grass reference, and uses eoratio to mimic the kc reponse over lai evolution.
static void petpen(){	
	
	double eair;
	double esat;	
	double lhvap;
	double psycon;
	double radb;
	double rnet;
	double rnetmg;
	double s;
	double tk4;
	double vpd;
	double dair;
	double rt;
	double et0;
	double kc;	
	double vapr;
	double ra;
	double wind_m;
	double Qcs;
	
	double alb		= 0.23;
	double g		= 0.;
	double windht	= 2.;
	double shair 	= 0.001005;
	double patm		= 101300.0;
	double sbzcon	= 4.903e-9;
	double k		= 0.41;
	double refht	= 0.12;
	double d		= (2./3.) * refht;	
	double Zom		= 0.123 * refht;
	double Zoh		= 0.1 * Zom;	
	double rl		= 100.;
	double rs		= (rl/(0.5 * 2.88)) / 86400; //Assuming half leaf Area (2.88) is contributing [converted (s m^-1 to d/m)] 

	FieldBase fb = selectWhere((*f:FieldBase*), f.lai_total >= 0.);
	
	//compute air properties
	lhvap 	= (2501.0 - 2.373 * tav) * 1000.;
	psycon	= shair * patm / (0.622 * lhvap) * 1000000.;
	
	esat = (vpsat(tmax) + vpsat(tmin)) / 2.;
	eair = vpsat(tdew);
	
	vpd = Math.max(0., esat - eair);
	s 	= (vpslope(tmax) + vpslope(tmin)) / 2.;
	rt	= 8.314 * (tav + 273.);
	dair = 0.028966 * (patm - 0.387 * eair)/rt;
	
	wind_m = wind * 1000.;
	
	ra = (Math.log((windht-d)/Zom)*Math.log((windht-d)/Zoh)) / ((k**2)*wind_m);
	
	tk4 = ((tmax+273.)**4 + (tmin+273.)**4) / 2.;
	Qcs = (0.75 * 2.e-5 * altitude) * Qo;
	
	radb = sbzcon * tk4 * (0.34 - 0.14 * Math.sqrt(eair/1000.)) * (1.35 * (srad / Qcs) - 0.35);
	rnet = (1 - alb) * srad - radb;
	
	rnetmg = (rnet - g);
	
	et0 = ((s * rnetmg + (dair * shair * vpd) / ra) / (s+psycon * (1+rs/ra)));
	et0 = et0 / (lhvap / 1000000.);
	
	kc = 1. + (fb.eoratio_total - 1.) * Math.min(6.,fb.lai_total) / 6.;
	eo = et0 * kc;
	eo = Math.max(0.0001, eo);

}


// Priestly-Taylor potential evapotranspiration
static void petpt(double alb_soil){

	double eeq;
	double slang;
	double td;
	double alb;
	
	//Can't use tav unless coefficients in EEQ equation are recalibrated.  Keep td calc as it was developed.         
	
	FieldBase fb = selectWhere((*f:FieldBase*), f.lai_total >= 0.);
		
	td = 0.6 * tmax + 0.4 * tmin;
		
	if(fb.lai_total <= 0.){	
		alb = alb_soil;	
	}else{	
		alb = 0.23 - (0.23 - alb_soil) * Math.exp(-0.75 * fb.lai_total);	
	}
		
	slang = srad * 23.923;
	eeq = slang*(2.0e-4 - 1.83e-4 * alb) * (td + 29.);
	eo  = eeq * 1.1;
	
	if(tmax > 35.){
		eo = eeq * ((tmax - 35.) * 0.05 + 1.1);	
	}else if(tmax < 5.){
		eo = eeq * 0.01 * Math.exp(0.18 * (tmax + 20.));	
	}
	
	eo = Math.max(0.0001, eo);
	

}

// Use inputed et0 to compute potential evapotranspiration (eo)
static void petinp(){

	double kc;
	
	FieldBase fb = selectWhere((*f:FieldBase*), f.lai_total >= 0.);
	
	kc = 1. + (fb.eoratio_total - 1.) * Math.min(6.,fb.lai_total) / 6.;
	eo = et0 * kc;
	eo = Math.max(0.0001, eo);

}


// Calculates soil potential evaporation from total eo and lai.
static void pse(){

	FieldBase fb = selectWhere((*f:FieldBase*), f.lai_total >= 0.);

	if(fb.lai_total <= 1.){
	eos = eo * (1. - 0.39 * fb.lai_total);	
	}else{
	eos = eo / 1.1 * Math.exp(-0.4 * fb.lai_total);
	}
	
	//there is a coefficient to adjust for each crop ksevp (Light extinction coefficient used for computation of soil evaporation)
		
	eos = Math.max(0.0, eos);
	

}

// Calculates potential transpiration rate, EOP (mm/d).
static void trans(){
	
	int P_type = 1; //1 - C4 species, 2 - C3, 3 - CAM. Using 1 just whil figure out how to fraction among different plant species at the same field (intercropping)
	double trat;
	double fdint;
	double eop_reduc;
	double eop_max;
	double ktrans = 0.75; // should be calculated for each crop
	
	FieldBase fb = selectWhere((*f:FieldBase*), f.lai_total >= 0.);
	
	eop = 0.;
	trat = tratio(P_type);
	
	fdint = 1. - Math.exp(-(ktrans) * fb.lai_total);
	eop = eo * fdint;
	eop_reduc = eop * (1. - trat);
	eop = eop * trat;
	
	eop_max = eo - eop_reduc - es; //Should add evaporation from mulch and flood in "es"
	eop = Math.min(eop, eop_max);
	
	eop = Math.max(0., eop);

}

static double tratio(int Ptype){
	
	double delta;
	double gamma;
	double lhv;
	double ra;
	double rb;
	double rl;
	double rlc;
	double rlf;
	double rlfc;
	double xden;
	double xnum;
	
	double uavg;
	
	rlf = 0.;	
	rlfc = 0.;
	
	FieldBase fb = selectWhere((*f:FieldBase*), f.lai_total >= 0.);
	
	if(fb.lai_total < 0.01){
	
		return 1.0;
		
	}else{
	
	
	uavg = wind / 86.4;
	rb = 10.;
	
	switch(Ptype){
	
		case 1:
		
		rlf = (1.0/(0.0328 - 5.49e-5*330.0 + 2.96e-8 * 330.0**2)) + rb;
		rlfc = (1.0/(0.0328 - 5.49e-5* CO2  + 2.96e-8 * CO2  **2)) + rb;
		break;
		
		case 2:
		
		rlf = 9.72 + 0.0757 * 330.0 + 10.0;
		rlfc = 9.72 + 0.0757 *  CO2  + 10.0;
		
		
		break;
		
		case 3:
		
		// to be constructed
		
		default:
		
		println("WARNING: no species type was found. Please choose among C3, C4 or CAM");
		break;
	}
		
	//Use FAO-56 assumption LAI = 2.88 reference for canopy resistances
	rl = rlf / (0.5 * 2.88);
	rlc = rlfc / (0.5 * 2.88);
	
	//Replace boundary layer resistance function with this eqn
	ra = 208. / uavg;
	
	delta 	= vpslope(tav)/100.;
	lhv		= 2500.9 - 2.345 * tav;
	gamma	= 1013.0 * 1.005 / (lhv * 0.622);
	
	xnum = delta + gamma * (1. + rl/ra);
	xden = delta + gamma * (1. + rlc/ra);
	
	return	xnum / xden;
	}

}


// Calculates saturated vapor pressure of air (Tetens, 1930).
static double vpsat(double t){
	
	return 610.78 * Math.exp(17.269 * t / (t + 237.30));	

}

//Calculates slope of saturated vapor pressure versus temperature curve using Classius-Clapeyron equation (see Brutsaert, 1982 p. 41)
static double vpslope(double t){

	return 18. * (2501.0 - 2.373 * t) * vpsat(t) / (8.314 * (t + 273.0)**2); 

}

//Calculates dew point temperature
static double calc_tdew(){

	double a = 0.61078;
	double b = 17.269;
	double c = 237.30;
	double td;
	double ea;
	double es;
	
	es = a * Math.exp(b * tmin / (tmin + c));
	ea = rh/100. * es;
	td = (c * Math.log(ea/a)) / (b - Math.log(ea/a));
	return td;

}

