import static parameters.*;
import static environment.*;
import static modules_base.*;
import static modules_light.*;
import static modules_organs.*;

import de.grogra.ray.physics.Spectrum;
import de.grogra.ray.physics.Spectrum3d;

// soil layers associated to a soil profile
module SoilLayer
{
	int    row;					// row number
	int	   strip;				// strip number
	int    nL;					// soil layer number
	double upper;				// upper layer depth (cm)
	double bottom;				// bottom layer depth (cm)
	double LL;					// volumetric soil water content in soil layer nL at lower limit	(cm3 [water] / cm3 [soil])
	double DUL;					// volumetric soil water content in soil layer nL at field capacity	(cm3 [water] / cm3 [soil])
	double SAT;					// volumetric soil water content in soil layer nL at staturation	(cm3 [water] / cm3 [soil])
	double KSAT;				// Saturated hydraulic conductivity in layer nL (cm/hr)
	double BDEN;				// Bulk density, soil layer L (g [soil] / cm3 [soil])
	double SLOC;				// Soil organic matter 
	double Thickness;			// Thickness of soil layer L (cm)
	double PlantDist;			// Distance between plant along a row (cm)
	double RowDist;				// Row distance	(cm)
	double Depth;				// Layer depth (cm)
	double SWC;					// Volumetric soil water content in layer nL (cm3 [water] / cm3 [soil])
	double TSWC;				// Total soil water in nL (cm)
	double SWCR;
	
	double 	rld;			// Root length density for soil layer nL (cm[root] / cm3[soil])
	int 	tss;				// number of days soil layer nL has been saturated
	double 	rwu;				// Root water uptake from soil layer nL (cm/d)
	double  rwf;				// Root weighting factor (0-1) inhospitable-hospitable soil to roots (Ritchie 1998)
	int		rwf_me = 2;			// Root weighting factor method (1 = distribution based on d50 and c parameters curve; 2 = weibull distribution values)
	
	
	double swdelts;				// Change in soil water content due to drainage in layer nL							(cm3 [water] / cm3 [soil])
	double swdeltu;				// Change in soil water content due to evaporation and/or upward flow in layer nL 	(cm3 [water] / cm3 [soil])
	double swdeltx;				// Change in soil water content due to root water uptake in layer nL				(cm3 [water] / cm3 [soil])
	double swdeltt;				// Change in soil water content due to tiledrain in layer nL (To be developed)		(cm3 [water] / cm3 [soil])
	double swdeltl;				// Change in soil water content due to tillage in layer nL (To be developed)		(cm3 [water] / cm3 [soil])
	double sw_avail;			// Soil water content in layer L available for evaporation, plant extraction, , or movement through soil (cm3 [water] / cm3 [soil])
	double sw_mm;				// Total soil water in nL (mm)
	double es_lyr;				// Evaporation + upward flow of nL (mm)
	double upflow;				// Upflow of nL (cm/d)
	double satfrac;				// Saturation fraction (0-1) of nL
	
	
	// Initial water conditions for simulation
	void initialConditions(){
		
		// considering init = field capacity
		SWC = DUL;
		TSWC = SWC * Thickness;
		SWCR = Math.max(0., (SWC - LL)/(DUL - LL));
	}
		
	double rwf(int rwf_m){
	
	switch(rwf_m){
			
		case 1:		
		
		double	D50	= 50;
		double	C	= 3;
		
		return 1 / (1 + (Depth/D50)**C);
		
		break;
		case 2:
		
		double alfa = 0.5;
		double beta = 2;
		double teta = 0;
		double dep;
		
		dep = Math.min(1.,Depth / 100.);		
		
		return (beta/alfa) * ((dep - teta)/alfa)**(beta - 1) * Math.exp(-(((dep-teta)/alfa)**beta));
		
		break;
	
	
	}
		
	
	}

	// initiation of a soil layer
	void initiate(int nLayer, int TileRow, int TileStrip)
	{
		nL 	= nLayer;
		row  	= TileRow;
		strip 	= TileStrip;
		Depth 	= Layer_Depth[nLayer-1] * 100.;
		LL 		= Layer_LL[nLayer-1];
		DUL 	= Layer_DUL[nLayer-1];
		SAT		= Layer_SAT[nLayer-1];
		KSAT	= Layer_KSAT[nLayer-1];
		BDEN	= Layer_BDEN[nLayer-1];
		SLOC	= Layer_SLOC[nLayer-1];
		
		if(nLayer == 1){
			Thickness = Layer_Depth[nLayer-1]* 100.0;			
		}else{
			Thickness = (Layer_Depth[nLayer-1] - Layer_Depth[nLayer-2]) * 100.0;
		}
		Thickness = 0.001*Math.round(1000*Thickness);
		upper = Depth - Thickness;
		bottom = Depth;
		
		PlantDist = 25.;
		RowDist = 140.;
		
		if(nLayer == 1) {Depth = Depth + 0.001;}		
		
		rwf = rwf(rwf_me);		
		rld = 0.02;
		
	}
} 
==> 
Translate(0,0,-Depth/100.) Box(Thickness/100.,PlantDist/100.,RowDist/100.).(setColor(0.51,0.33,0.16))
;

// Soil profile associated to each tile at the scene
module SoilProfile() extends Null{
	
	int		row;					// row number
	int		strip;					// strip number
	int		cn;						// Curve Number (Used for runoff calculations)
	int		nLayers;				// Number of layers
	long	nRootSystemsPrevious;	//
	double	swcon;					// Soil water conductivity constant; whole profile drainage rate coefficient (1/d) 
	double 	runoff;					// Calculated runoff (mm/d)
	double	watavl;					// Water available for infiltration or runoff (rainfall plus irrigation) (mm/d)
	double  winf;					// Water available for infiltration - rainfall minus runoff plus  net irrigation (mm / d)
	double  pinf;					// Potential water available for infiltration (cm)
	double drain;					// Drainage rate from soil profile (mm/d)
	double infilt;					// Infiltration rate (mm / d)
	double flood;					// Current depth of flooding (mm) (To be developed)
	double excs; 					// Excess water to be added to runoff (cm/d)	
	boolean puddled;				// Flag variable indicating whether lowland field has been puddled 
	boolean bunded;					// Flag variable indicating if field is currently bunded 
	boolean mulchEffect;			// Flag variable whether to use or not mulch effect calulations (To be developed)
	double mulch;					// Amount of mulch on field (t ha-1)	
	double crain;					// Cumulative precipitation (mm)
	double tdrain;					// Total daily drainage from soil (mm)
	double trunof;					// Total daily runoff from soil (mm)
	double tswini;					// Total initial soil water content (cm)
	double tsw;						// Total soil water content (cm)
	double alb_soil;				// albedo for energy balance calculations
	
	int mesev = 2;					// 1 = Salus Method; 2 = Ritchie Method;
	
	// For Ritchie Method
	double u;
	double sumes1;
	double sumes2;
	double t;
	
	//Soil Temperature
	
	
	
	double[] sw_mm_NEW		= new double[Layer_Depth.length];	
	double[] swdelts_mm		= new double[Layer_Depth.length];
	double[] swdeltx_mm		= new double[Layer_Depth.length];
	double[] swdeltl_mm		= new double[Layer_Depth.length];
	double[] swdeltu_mm		= new double[Layer_Depth.length];
	double[] swdeltt_mm		= new double[Layer_Depth.length];

	double rwumx = 0.07; 		//Root water uptake,maximum      mm2/m (Crop state) 0.07 for sugacane?
	double trwu;				// Total root water uptake
	double trwup;				// Total potential root water uptake 
	double wtdep; 				// should calculated by wdept for root water uptake
	double pormin = 0.02; 		//Minimum pore space required for supplying oxygen to roots for optimal growth and function (cm3/cm3) (from Plant module)
	
	
	
	void RootDevelop(){
		
		double totalRootGrowth;
		double avgSLR;
		double abortedRoots;
		long nRootSystems;
		
		nRootSystems = count((* r:RootSystem, (r.row == row && r.strip == strip) *));
		
		if(nRootSystems > 0){
		
		RootSystem rs = selectWhere((*r:RootSystem*), (r.row == row && r.strip == strip));
		
		totalRootGrowth = sum((* r:RootSystem, (r.row == row && r.strip == strip) *)[growth]);
		avgSLR			= mean((* r:RootSystem, (r.row == row && r.strip == strip) *)[slr]);
	
	for(int L = 0; L<=nLayers-1; L++){
	
		SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
		
		sl.rld += (totalRootGrowth * 1.e-3) * avgSLR * (sl.rwf/sum((* s:SoilLayer, (s.row == row && s.strip == strip) *)[rwf])) / (sl.Thickness * sl.PlantDist * sl.RowDist);
		
		sl.rld = Math.min(0.5, sl.rld);
	
		if(nRootSystemsPrevious > nRootSystems){
			
		abortedRoots = sum((* r:RootSystem, (r.row == row && r.strip == strip && r.aborted) *)[biomass]);
			
		sl.rld = sl.rld - (abortedRoots * avgSLR * (sl.rwf/sum((* s:SoilLayer, (s.row == row && s.strip == strip) *)[rwf])) / (sl.Thickness * sl.PlantDist * sl.RowDist));
				
		}
		
	}
	
	nRootSystemsPrevious = nRootSystems;
	
	}
		
	
	}
	
	// Run-off calculations
	void Runoff(){
		
		double swabi;			// A soil water abstraction index, a unitless indicator of the soil water condition at the time of a rainfall event.  This affects the intercept of the runoff axis when runoff starts to occur--later when drier and sooner when wetter.
		double iabs;			// Initial abstraction ratio, modified for surface mulch layer effects.
		double maxiabs = 0.6;	// Maximum initial abstraction ratio
		double smx;				// Soil storage available for surface water based on CN formula	(mm)
		double pb;				// Determines threshold amount of rainfall that will occur before runoff starts (mm/d)
		
		smx = 254.0 * (100.0/cn - 1.0);
		
		// Uses only two top layers to compute runoff
		SoilLayer sl1 = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == 1));
		SoilLayer sl2 = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == 2));

		swabi = Math.max(0, 0.15 * ((sl1.SAT - sl1.SWC)/(sl1.SAT - sl1.LL * 0.5) + (sl2.SAT - sl2.SWC)/(sl2.SAT - sl2.LL * 0.5)));
		
		if(mulchEffect){
		iabs = swabi + (maxiabs - swabi) * mulch;
		}else{
		iabs = Math.min(swabi,maxiabs);
		}
		
		pb = watavl - iabs * smx;
		
		
		if(watavl > 0.001){
			if(pb > 0){
				runoff =  pb**2/(watavl + (1-iabs) * smx);
			}else{
				runoff =  0.0;
			}		
		}else{		
			runoff =  0.0;
		}		
		
	}
	
	// Water infiltration calculations
	void Infiltration(){
		
		double drcm;		// Drainage rate from soil profile (cm/d)
		double hold;		// Amount of water a soil layer will hold above it's present level, used to calculate downward flow; also, temporary  variable/ intermediate calculation (cm)
		double tmpexcs;		// 
		double[] drn 		= new double[nLayers]; //Drainage rate through soil layer L (cm/d) 
		double[] swtemp		= new double[nLayers]; //Soil water content in layer L (temporary value to be modified based on drainage, root uptake and upward flow through soil  layers). (cm3/cm3)
		
		excs 			= 0.0;
		tmpexcs			= 0.0;
		
		for(int L = 0; L<=nLayers-1; L++){
		
			SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
			
			swtemp[L]	= sl.SWC;
			
			hold = (sl.SAT - swtemp[L]) * sl.Thickness;			
			
			if(pinf > 0.001 && pinf > hold){
				
				if(L==0){
					drcm = 0.9 * swcon * (sl.SAT - sl.DUL) * sl.Thickness;
				}else{
					drcm = swcon * (sl.SAT - sl.DUL) * sl.Thickness;
				}
			
				drn[L] = pinf - hold + drcm;
				
				if(sl.KSAT > 0.0 && drn[L] > (sl.KSAT * 24.0)){					
					drn[L] 	= sl.KSAT * 24.0;
					drcm	= drn[L] + hold - pinf;
				}
				
				swtemp[L] = swtemp[L] + (pinf - drn[L])/sl.Thickness;
				
				if(swtemp[L] > sl.SAT){
					
					tmpexcs = (swtemp[L] - sl.SAT) * sl.Thickness;
					swtemp[L] = sl.SAT;
					
					if(L==0 && tmpexcs > 0.0){
						excs = excs + tmpexcs;
					}
					
					if(L > 0){
						int Lup = L-1;
						
						while(tmpexcs > 0.0001 && Lup >=0){
							
							SoilLayer slup = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (Lup+1)));
				
							hold = Math.min((slup.SAT - swtemp[Lup])*slup.Thickness,tmpexcs);
							swtemp[Lup] = swtemp[Lup] + hold / slup.Thickness;
							drn[Lup] = Math.max(drn[Lup] - tmpexcs,0);
							tmpexcs = tmpexcs - hold;
							
							if(Lup == 0 && tmpexcs > 0.0001){
							excs = excs + tmpexcs;
							}					
						}				
					}				
				}
				
				pinf = drn[L];
				
			}else{
			
			swtemp[L] = swtemp[L] + pinf / sl.Thickness;
			if(swtemp[L] >= (sl.DUL + 0.003)){
				
				if(L ==0){
					drcm = 0.9 * (swtemp[L] - sl.DUL) * swcon * sl.Thickness;
				}else{
					drcm = (swtemp[L] - sl.DUL) * swcon * sl.Thickness;
				}
				
				drn[L] = drcm;
				
				if(sl.KSAT > 0.0 && drn[L] > (sl.KSAT*24.0)){
					drn[L] = sl.KSAT*24.0;
					drcm = drn[L];				
				}
				
				swtemp[L] = swtemp[L] - drcm / sl.Thickness;
				pinf = drcm;
			
			}else{				
				pinf 	= 0.0;
				drn[L] 	= 0.0;			
			}			
			}
			
			sl.swdelts = swtemp[L] - sl.SWC;			
			infilt = infilt + sl.swdelts * sl.Thickness * 10.;
			
		}
		
		drain = pinf * 10.0;
			
	}
	
	// Saturated flow calculations
	void SatFlow(){
		
		double hold;
		double tmpexcs;
		double swold;
		double[] drn 		= new double[nLayers];
		double[] drmx		= new double[nLayers];
		double[] swtemp		= new double[nLayers];
		
				
		for(int L = 0; L<=nLayers-1; L++){
		
			SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));			
			swtemp[L]	= sl.SWC;
						
			if(swtemp[L] >= (sl.DUL + 0.003)){							
				
				drmx[L] = Math.max(0,(swtemp[L] - sl.DUL) * swcon * sl.Thickness);
				
			}
			
			if(L == 0){
			
				drn[L] = drmx[L];
			}else{
			
				hold = 0.0;
				if(swtemp[L] < sl.DUL){
				hold = (sl.DUL - swtemp[L]) * sl.Thickness;
				}
				
				drn[L] = Math.max(0,drn[L-1] + drmx[L] - hold);
			}
			
			if(sl.KSAT > 0 && drn[L] > (sl.KSAT*24.0)){
			drn[L] = sl.KSAT * 24.0;
			}
					
		}		
		//Compute volumetric water contents after drainage in a day.
		//Prevent water content in any layer from exceeding saturation as water drains down in the profile.   
		for(int L = nLayers-1; L>=1; L--){
			
			SoilLayer slb = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
			swold = swtemp[L];
			swtemp[L] = swtemp[L] + (drn[L-1] - drn[L]) / slb.Thickness;
			
			if(swtemp[L] > slb.SAT){
			drn[L-1] = Math.max(0,(slb.SAT - swold) * slb.Thickness + drn[L]);
			swtemp[L] = slb.SAT;
			}
			
		}
		
		SoilLayer sltop = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (1)));
		swtemp[0] = swtemp[0] - drn[0] / sltop.Thickness;
		drain = drn[nLayers-1] * 10;
		
		//Calculating the dwc/dt
		for(int L = 0; L<=nLayers-1; L++){
		
			SoilLayer sl_dt = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
			sl_dt.swdelts = swtemp[L] - sl_dt.SWC;						
		
		}
	
	}
	
	//Upflow calculations (Not debugged yet, been performed by soil evaporation method)
	void UpFlow(){
	
	int	ist;
	int M;
	double swold;
	double thet1;
	double thet2;
	double dbar;
	double grad;
	double flowfix;	
	
	double[] swtemp		= new double[nLayers];
	double[] sw_inf		= new double[nLayers];	
	double[] esw		= new double[nLayers];
	
	for(int L = 0; L<=nLayers-1; L++){
		
		SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
		
		sl.upflow = 0.0;
		sl.swdeltu = 0.0;
		swtemp[L] = sl.SWC;
		sw_inf[L] = sl.sw_avail; // sw_avail has been calculated previously on SatFlow method
		sl.sw_avail = Math.max(0., sl.sw_avail - sl.DUL);
		esw[L] = sl.DUL - sl.LL;	
	
	}
	
	SoilLayer top_sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (1)));
	
	if(top_sl.Thickness >= 5.0){ist=0;}else{ist=1;}
	
	for(int L = ist; L<=nLayers-2; L++){
		M = L + 1;
		swold = swtemp[L];
		
		SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
		SoilLayer sl_M = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (M+1)));
		
		thet1 = Math.max(0,Math.min(swtemp[L] - sl.LL, esw[L]));
		thet2 = Math.max(0,Math.min(swtemp[M] - sl_M.LL, esw[M]));
		
		dbar = 0.88 * Math.exp(35.4 * ((thet1*sl.Thickness + thet2*sl_M.Thickness)/(sl.Thickness + sl_M.Thickness))* 0.5);
		dbar = Math.min(dbar,100.);
		
		grad = (thet2/esw[M] - thet1/esw[L]) * (esw[M] * sl_M.Thickness + esw[L] * sl.Thickness) / (sl_M.Thickness + sl.Thickness);
		
		sl.upflow = dbar * grad / ((sl.Thickness + sl_M.Thickness)*0.5);
		
		//upward flow from layer M to L
		
		if(sl.upflow > 0.){
		
			if(swtemp[L] <= sl.DUL){
			
				swtemp[L] = swtemp[L] + sl.upflow / sl.Thickness;
				sw_inf[L] = sw_inf[L] + sl.upflow / sl.Thickness;
				
				if(swtemp[L] > sl.DUL || sw_inf[L] > sl.SAT){
					
					flowfix = Math.max(0., ((swtemp[L] - sl.DUL) * sl.Thickness));
					flowfix = Math.max(flowfix, ((sw_inf[L] - sl.SAT) * sl.Thickness));
					flowfix = Math.min(sl.upflow, flowfix);
					sl.upflow = sl.upflow - flowfix;
					swtemp[L] = swold + sl.upflow / sl.Thickness;		
				
				}
			
			}else{				
				sl.upflow = 0.;							
			}
			
			if(sl.upflow / sl.Thickness > sl_M.sw_avail){
			
				sl.upflow = sl_M.sw_avail * sl_M.Thickness;
				swtemp[L] = swold + sl.upflow / sl.Thickness;
			
			}
			
			swtemp[M] = swtemp[M] - sl.upflow / sl_M.Thickness;
		
		//downward flow from layer L to M
		}else if(sl.upflow < 0.){
			
			if(swtemp[L] >= sl.LL){
			
				if(Math.abs(sl.upflow / sl.Thickness) > sl.sw_avail){
				
					sl.upflow = -sl.sw_avail * sl.Thickness;
				
				}
				
				swtemp[L] = swtemp[L] + sl.upflow / sl.Thickness;
				swtemp[M] = swtemp[M] - sl.upflow / sl_M.Thickness;
				sw_inf[M] = sw_inf[M] - sl.upflow / sl_M.Thickness;
				
				if(sw_inf[M] > sl_M.SAT){
					
					flowfix = Math.min(Math.abs(sl.upflow), (sw_inf[M] - sl_M.SAT) * sl_M.Thickness);
					sl.upflow = sl.upflow + flowfix;
					swtemp[L] = swold + sl.upflow / sl.Thickness;
					swtemp[M] = swtemp[M] - flowfix / sl_M.Thickness;
				
				}
			
				// no downwar movement if swtemp < LL
			}else{
			
				sl.upflow = 0.;
			
			}
		
		}
		
	
	}	
	
	for(int L = 0; L<=nLayers-1; L++){		
		SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
		sl.swdeltu = swtemp[L] - sl.SWC;	
		}	
	}
	
	void wbsum(){		
		
		tsw = sum((* sl:SoilLayer, (sl.row == row && sl.strip == strip) *)[TSWC]);
		crain += rain;
		tdrain += drain;
		trunof += runoff;
		
		
		// sum of initial conditions
		if(dayOfYear == (startingDayOfYear+1) && year == (startingyear)){
		
			crain 	= 0.;
			tdrain	= 0.;
			trunof	= 0.;
			tswini	= 0.;
			
			tswini = sum((* sl:SoilLayer, (sl.row == row && sl.strip == strip) *)[SWC]);
			tsw = tswini;		
		
		}	
	
	}
	
	// Calculate soil water table depth
	void wtdept(){
		
		double tol = 0.95;		
		
	for(int L = nLayers-1; L>=0; L--){
		
		SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
		
		sl.satfrac = (sl.SWC - sl.DUL) / (sl.SAT - sl.DUL);
		sl.satfrac = Math.min(Math.max(0.0, sl.satfrac), 1.0);		

	}	
	}
	
	// Calculates root water uptake rate for each soil layer and total rate.
	void RootWatUpPotential(){
		
		double swcon1 = 2.67e-3;	// 1.32e-3;
		double swcon3 = 6.68; 		//7.01;
		double denomi;
		double swexf;
		
		double[] swcon2		= new double[nLayers];
		
		
		trwup = 0.;
		for(int L = 0; L<=nLayers-1; L++){
			
			SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
		
			swcon2[L] = 120. - 250. *  sl.LL;
			if(sl.LL > 0.3){ swcon2[L] = 45.;}
			
			swcon2[L] = 68.; //following the Ritchie's 1998 work, the above approach is very restrictive.
			
			sl.rwu = 0.;			
			
			if(sl.rld <= 0.00001 || sl.SWC <= sl.LL){
				sl.rwu = 0.;			
			}else{
				
				if(sl.rld > Math.exp(swcon3)){
					denomi = swcon3 - Math.log(swcon3);
				}else{
					denomi = swcon3 - Math.log(sl.rld);
				}				
				
				sl.rwu = swcon1 * Math.exp(Math.min((swcon2[L] * (sl.SWC - sl.LL)),40.)) / denomi;
				
				if((sl.SAT - sl.SWC) >= pormin || pormin < 1.e-6){
				sl.tss = 0;
				}else{			
				sl.tss++;
				}
				
				if(sl.tss > 2){
				
					swexf = Math.max(0.,(sl.SAT - sl.SWC) / pormin);
				}else{
				swexf = 1.0;
				}				
				
				swexf = Math.min(swexf, 1.);
				
				sl.rwu = Math.min(sl.rwu, rwumx * swexf);				
				
			}			
			
			sl.rwu = sl.rwu * sl.Thickness * sl.rld;
			trwup = trwup + sl.rwu;	
			
		}
	
	}
	
	// Calculates root extraction for each soil layer.
	void RootWatUp(){
		
		double wuf;				// Root water uptake reduction factor (to update rwu to meet transpiration demand)
		double[] swtemp		= new double[nLayers];
		
		
		
		for(int L = 0; L<=nLayers-1; L++){
		
			SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
			
			sl.swdeltx 	= 0.;
			swtemp[L]	= sl.SWC;
			sl.sw_avail	= Math.max(0., sl.sw_avail - sl.LL);
			
		}
		
		trwu = 0.;
		
		//Checking if root system exist
		if(count((* r:RootSystem, (r.row == row && r.strip == strip) *)) > 0){
			
		RootSystem rs = selectWhere((*r:RootSystem*), (r.row == row && r.strip == strip));		
				
		if(ep > 0.){
			if((0.1 * ep) <= trwup){
				wuf = 0.1 * ep / trwup;
			}else{
				wuf = 1.0;
			}
			
			for(int L = 0; L<=nLayers-1; L++){
			
				SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
				
				if(swtemp[L] > sl.LL){
					
					sl.rwu = sl.rwu * wuf;
					
					if((sl.rwu / sl.Thickness) > sl.sw_avail){
					sl.rwu = sl.sw_avail * sl.Thickness;
					}
					
					//Checking rootDepth
					if(rs.rootDepth > sl.Depth){
					sl.rwu = sl.rwu;
					}else{
					sl.rwu = sl.rwu * (Math.max(0., rs.rootDepth - sl.upper)/ sl.Thickness);
					}
					
					swtemp[L] = swtemp[L] - sl.rwu / sl.Thickness;
					trwu = trwu + sl.rwu;
				}			
			}
			
			ep = trwu * 10.;
					
		}else{
			
			SoilLayer sl_all = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL >= 0));
			
			trwu 				= 0.;
			sl_all.rwu			 	= 0.;
		
		}
		}
		
		for(int L = 0; L<=nLayers-1; L++){
		
			SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
			sl.swdeltx = swtemp[L] - sl.SWC;	
		
		}	
		
	}
	
	// Calculates actual soil evaporation (ES, mm/d) based on Ritchie water balance method
	void SoilEvaporation_R(){
	
		double swef;
		double swmin;
		double winfmod;
		double awev1;
		double esx;

		SoilLayer sl_top = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (1)));
		
		//Set air dry water content for top soil layer
		swef = 0.9 - 0.00038 * (sl_top.Thickness - 30.)**2;
		
		
		if((dayOfYear-1) == startingDayOfYear && year == startingyear){			
			
			if(sl_top.SWCR >= 1.){
			
				sumes1 = 0.;
				sumes2 = 0.;
				t = 0.;
			
			}else if(((sl_top.DUL - sl_top.DUL)*sl_top.Thickness*10) <= u){
				sumes2 = 0.;
				t	   = 0.;
				sumes1 = ((sl_top.DUL - sl_top.DUL)*sl_top.Thickness*10);			
			}else{
				sumes2 = ((sl_top.DUL - sl_top.DUL)*sl_top.Thickness*10) - u;
				sumes1 = u;
				t = (sumes2 / 3.5)**2;			
			}
		
		}
		
		
		
		if((sumes1 >= u) && (winf >= sumes2)){
		
			//Stage 1 evaporation
			winfmod = winf - sumes2;
			sumes1 = u - winfmod;
			sumes2 = 0.;
			t = 0.;
			
			if(winfmod > u){
			sumes1 = 0.;
			}
			
			
			sumes1 = sumes1 + eos;
			if(sumes1 > u){
			es = eos - 0.4 * (sumes1 - u);
			sumes2 = 0.6 * (sumes1 - u);
			t = (sumes2 / 3.5)**2;
			sumes1 = u;			
			}else{
			es = eos;			
			}			
			
		}else if((sumes1 > u) && (winf < sumes2)){
		
			//Stage 2 evaporation
			
			t = t + 1.;
			
			es = 3.5 * t**0.5 - sumes2;
			
			if(winf > 0.){
			
				esx = 0.8 * winf;
				if(esx <= es){ esx = es + winf;}
				if(esx > eos){ esx = eos;}
				es = esx;
			
			}else if(es > eos){
				es = eos;
			}
			
			sumes2 = sumes2 + es - winf;
			t = (sumes2 / 3.5)**2; 
			
			
		
		}else if(winf >= sumes1){
			
			//Stage 1 evaporation
			sumes1 = 0.;
			
			sumes1 = sumes1 + eos;
			if(sumes1 > u){
			es = eos - 0.4 * (sumes1 - u);
			sumes2 = 0.6 * (sumes1 - u);
			t = (sumes2 / 3.5)**2;
			sumes1 = u;			
			}else{
			es = eos;			
			}
			
		
		
		}else{
		
			//Stage 1 evaporation
			sumes1 = sumes1 - winf;
			
			sumes1 = sumes1 + eos;
			if(sumes1 > u){
			es = eos - 0.4 * (sumes1 - u);
			sumes2 = 0.6 * (sumes1 - u);
			t = (sumes2 / 3.5)**2;
			sumes1 = u;			
			}else{
			es = eos;			
			}
				
		}
		
		
		awev1 = (sl_top.SWC - sl_top.LL * swef) * sl_top.Thickness * 10.;
		awev1 = Math.max(0., awev1);
		
		if(awev1 < es){
			
			if((sumes1 >= u) && (sumes2 > es)){
			
				sumes2 = sumes2 - es + awev1;
				t = (sumes2 / 3.5)**2;
				es = awev1;
			}else if((sumes1 >= u) && (sumes2 < es) && (sumes2 > 0.)){
				sumes1 = sumes1 - (es - sumes2);
				sumes2 = Math.max(sumes1 + awev1 - u, 0.);
				sumes1 = Math.min(sumes1 + awev1, u);
				t = (sumes2 / 3.5)**2;
				es = awev1;			
			}else{
			
				sumes1 = sumes1 - es + awev1;
				es = awev1;
			}	
		
		}
		
		//Avaiable water = SW - air dry limit + infil. or sat. flow
		swmin = Math.max(0., sl_top.sw_avail - swef * sl_top.LL);
		
		if(es > (swmin * sl_top.Thickness *10.)){
		
			es = swmin * sl_top.Thickness *10.;		
		}
		
		es = Math.max(0., es);
	
	}
	
	// Calculates actual soil evaporation (ES, mm/d) and upflow movement
	// Based on Ritchie et al. (2009) - Application of a functional model for simulation of soil evaporation and water redistribution.
	void SoilEvaporation_S(){
		
		int profile_type;
		double sw_threshold;
		double a_val;
		double b_val;
		double red_factor;
		double es_coef_GW;
		double swdeltu_GW;

		double[] swad		= new double[nLayers];
		double[] meandep	= new double[nLayers];
		double[] swtemp		= new double[nLayers];
		double[] es_coef	= new double[nLayers];
		
		//-----------------------------------------------------------------------------------------------
		//    ProfileType:
		//    1 = Wet: SW > DUL in at least one layer in top 100 cm and SW > SW_threshold in top layer      
		//    2 = Intermediate: wet, but SW < SW_threshold in top layer 
		//    3 = Dry: SW < DUL in all layers in top 100 cm
		//------------------------------------------------------------------------------------------------
		
		es = 0.;
		
		profile_type = 3; // Profile is dry until proven wet
		
		for(int L = 0; L<=nLayers-1; L++){
		
			SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
			
			// Air dry water content
			swad[L] = 0.3 * sl.LL;
			
			// Mean depth for each soil layer
			meandep[L] = sl.Depth - sl.Thickness / 2.; //(cm)
			
			if(sl.swdelts > 0.0){
			
				swtemp[L] = sl.SWC + 0.5 * sl.swdelts;
			
			}else{
			
				swtemp[L] = sl.SWC + sl.swdelts;
			}
			
			if(meandep[L] < 100. && swtemp[L] > sl.DUL){
			
				profile_type = 1;
			}			
		}
		
		if(profile_type == 1){
		
			SoilLayer sl_top = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (1)));
			
			sw_threshold = 0.275 * sl_top.DUL + 1.165 * sl_top.DUL * sl_top.DUL + (1.2 * sl_top.DUL ** 3.75) * meandep[0];
			
			if(swtemp[0] < sw_threshold){
				profile_type = 2;			
			}		
		}
		
		for(int L = 0; L<=nLayers-1; L++){
			
			SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
			
			switch(profile_type){
			
			case 3:
			a_val =   0.5 + 0.24 * sl.DUL;
			b_val = -2.04 + 0.20 * sl.DUL;
			es_coef[L] = a_val * meandep[L] ** b_val;
			break;
			
			case 2:
			
			es_coef[L] = 0.011;
			break;
			
			case 1:
			
			a_val =  0.26;
			b_val = -0.70;
			es_coef[L] = a_val * meandep[L] ** b_val;
			break;
			
		}
		
		sl.swdeltu = -(swtemp[L] - swad[L]) * es_coef[L]; // (mm3/mm3)
		
		sl.sw_avail = sl.SWC + sl.swdelts - swad[L];
		
		if(sl.SWC <= (sl.LL * 0.3)){sl.sw_avail =0;}
		
		//Limit to available water
		if(-sl.swdeltu > sl.sw_avail){
		
			sl.swdeltu = -sl.sw_avail;
			
		}
		
		// To limit evaporation only as an outgoing of water
		sl.swdeltu = Math.min(0.,sl.swdeltu);
		
		sl.es_lyr = -sl.swdeltu * sl.Thickness * 10.0;	// (mm)		
		es = es + sl.es_lyr;					// profile sum (mm)	
		
		}
		
		// Limit total profile soil evaporation to potential soil evaporation
		red_factor = 1.0;
		SoilLayer sl_all = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL >=0));
		SoilLayer sl_bot = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (nLayers)));
		
		if(es > eos){			
			
			red_factor = eos / es;
			sl_all.es_lyr = sl_all.es_lyr * red_factor;
			sl_all.swdeltu = sl_all.swdeltu * red_factor;
			es = eos;		
		}
		
		sl_all.upflow = 0.0;		
		
		//GW - Wet conditions
		a_val =  0.26;
		b_val = -0.70;
		es_coef_GW = a_val * sl_bot.bottom ** b_val;
		swdeltu_GW = -(sl_bot.SAT - 0) * es_coef_GW;
		
		sl_bot.upflow = sl_bot.es_lyr / 10.;
		
		for(int L = nLayers-2; L>=0; L--){
			
			SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
			SoilLayer slup = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+2)));
			
			sl.upflow = slup.upflow + sl.es_lyr / 10.;
			//This upflow amount is not been used anywhere rather than mesev =2;
		
		}		
		
	}
	
	// Soil Water balance - Daily rate calculations
	void WaterBalance_rate(){	
		
		SoilLayer sl_all = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL >= 0));
		
		//check whether snow is happening
		if(tmax <= 1 && snow > 0.001){		
			// compute snow contribution to water income (To be developed)
		}else{
		watavl = rain;
		}
		
		// set process rates to zero
		pinf 				 = 0.;
		winf				 = 0.;
		infilt				 = 0.;
		drain				 = 0.;
		excs				 = 0.;		
		sl_all.swdelts		 = 0.;
		sl_all.swdeltu		 = 0.;
		sl_all.swdeltt		 = 0.;
		sl_all.swdeltl		 = 0.;
		
		//condition when the field is pudded
		if(puddled){
		//compute conditions for puddled fields (To be constructed)		
		}else{		
		
		// Bunded field (rice)?
		if(bunded){		
			runoff = 0.;
			winf = Math.max(0, flood + irrig + rain); //(mm)					
		}else{
		// Upland field
		// Not bunded, flooded conditions not possible (this is not Holland)
		
		//water first absorbed by mulch, if presents
		if(mulchEffect){
		//Ritchie mulch effect model (To be constructed)
		}	
		
		// Compute runoff
		Runoff();
						
		winf = watavl - runoff + irrig; //(mm)	
		
		}		
				
		// potential for infiltration
		pinf = winf * 0.1;				//(cm)
		
		//call infiltration() method to calculate infiltration rates on days with irrigation or rainfall.
		//call SatFlow() method on days with no irrigation or rain to calulate satirated flow.		
		if(pinf > 0.0001){	
			
			// calculating the amount of water for intiltration (infilt, drain, drn, excs, swdelts)
			infilt = 0.0;
			Infiltration();			
			infilt = infilt + drain;
						
			//Excess water not infiltrated is added to overland runoff
			//if bunded, excess water is accounted for in infilt variable
			if(excs > 0 && bunded == false){
			runoff = runoff + excs * 10.0;
			}
			
		}else{
			
			SatFlow();
			
		}
		
		}
		
		
		// Should be used only when evaporation method is not the default (Sulieman-Ritchie 2006)
		if(flood <= 0.0 && mesev != 1){
									
			for(int L = 0; L<=nLayers-1; L++){
				
				SoilLayer sl_dt = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
				sl_dt.sw_avail	= Math.max(0., sl_dt.SWC + sl_dt.swdelts);
			}
			
			UpFlow();		
		}
		
		// to be constructed to account for tillage effect on swc
		//if(tillage){}		
	}
	
	// Soil Water balance - Daily integration
	void WaterBalance_inte(){
	
		// -----------------------
		// Daily integration
		// -----------------------
		
		//perform integration of soil water fluxes
		// substract soil evaporation from layer 1
		
		for(int L = 0; L<=nLayers-1; L++){
			
			
			SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
			sl.sw_mm 		= sl.SWC 		* sl.Thickness * 10.;
			swdelts_mm[L]	= sl.swdelts 	* sl.Thickness * 10.; 
			swdeltx_mm[L]	= sl.swdeltx 	* sl.Thickness * 10.;
			swdeltl_mm[L]	= sl.swdeltl 	* sl.Thickness * 10.;
			swdeltu_mm[L]	= sl.swdeltu 	* sl.Thickness * 10.;
			swdeltt_mm[L]	= sl.swdeltt 	* sl.Thickness * 10.;			
						
			sw_mm_NEW[L] = sl.sw_mm + swdelts_mm[L] + swdeltu_mm[L] + swdeltl_mm[L] + swdeltx_mm[L] + swdeltt_mm[L];
				
			sl.SWC = sw_mm_NEW[L] / sl.Thickness / 10.;
			sl.TSWC = sl.SWC * sl.Thickness;
			
		}
		
				
		// Perform daily summation of water balance variables.
		wbsum();
		
		soilWatBal.getRow(time).set(0,(sum((* s:SoilLayer, (s.row == row && s.strip == strip) *)[TSWC]) / sum((* s:SoilLayer, (s.row == row && s.strip == strip) *)[Thickness])));
		
		for (int nLayer=1; nLayer<=Layer_Depth.length; nLayer++){
			
			SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (nLayer)));			
			soilWatBal.getRow(time).set(nLayer,sl.SWC);
		}
		
		
	}
	
	
	
	//Soil Temperature - Based on EPIC model
	void stemp(){		
		
		double abd;
		double fx;
		double dp;
		double ww;
		double b;
		double hday;
		double tbd;
		double tll;
		double tdl;
		double cumdpt;
		double[] dsmid		= new double[nLayers];
		
		
		//
		if(latitude < 0){			
				hday = 20.;			
		}else{
				hday = 200.;			
		}
		
		tbd = 0.;
		tll = 0.;			
		tdl = 0.;
		cumdpt = 0.;
			
			
		for(int L = 0; L<=nLayers-1; L++){
			
			SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
			
			dsmid[L] = cumdpt + sl.Thickness * 5.;
			cumdpt = cumdpt + sl.Thickness * 10.;
			tbd = tbd + sl.BDEN * sl.Thickness;
			tll = tll + sl.LL	* sl.Thickness;
			tdl = tdl + sl.DUL	* sl.Thickness;
			
			if(L ==(nLayers-1)){
			
				abd = tbd / sl.Depth;
			}
		}
			
		tsw = sum((* sl:SoilLayer, (sl.row == row && sl.strip == strip) *)[TSWC]);
		
		
			
		
		if((dayOfYear-1) == startingDayOfYear && year == startingyear){			
						
		
		}
		
		
	
	}
	
	
//Soil-Plant-Atmosphere energy balance components
 void spa(){
	
 	 SoilLayer sl_all = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL >= 0));
 	 sl_all.swdeltx = 0.;
 
 	 // Calculate the availability of soil water
 	 for(int L = 0; L<=nLayers-1; L++){
 	 
 	 	 SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
 	 	 
 	 	 sl.sw_avail = Math.max(0., sl.SWC + sl.swdelts + sl.swdeltu); 	 	 
 	 
 	 }
 	 
 	 //Check LAI of all field (make more sense since the approaches used here are for homogeneus canopies)
 	 FieldBase fb = selectWhere((*f:FieldBase*), f.lai_total >= 0.); 	 
 	 
 	 if(fb.lai_total > 0.){
 	 	 
 	 	 // Potential Root Water Uptake
 	 	 RootWatUpPotential();
 	 }else{
 	 	 
 	 	 sl_all.rwu			= 0.;
 	 	 trwup				= 0.;
 	 } 	 
  	 
 	 
 	 // Potential Evapotranspiration 	 
 	 if(flood > 0.){
 	 
 	 	 alb_soil = 0.05;
 	 }else{
 	 
 	 	 alb_soil = albedo;
 	 }
 	 
 	 // Methods
 	 switch(petMethod){
 	 	 
 	 	 // FAO-56 (PM)
 	 	 case 1:
 	 	 
 	 	 petpen();
 	 	 break;
 	 	 
 	 	 // Pristley-Taylor
 	 	 case 2:
 	 	 
 	 	 petpt(alb_soil);
 	 	 break;
 	 	 
 	 	 // Use input et0 data times eoratio(kc)  
 	 	 case 3: 	 
 	 	 
 	 	 petinp();
 	 	 break;
 	 }
 	 
 	 // Potential Soil evaporation
 	 pse();
 	 
 	 es = 0.;
 	 esm = 0.;
 	 esf = 0.;
 	 sl_all.upflow = 0.;
 	 sl_all.es_lyr = 0.;
 	 
 	 if(eos > 1e-6){
 	 
 	 	 switch(mesev){
 	 	 
 	 	 case 1:
 	 	 
 	 	 //Actual soil evaporation SALUS (Suleiman, A.A., J.T.Ritchie. Modeling Soil Water Redistribution during Second-Stage Evaporation. 2003)
 	 	 SoilEvaporation_S(); 	 	 
 	 	 break;
 	 	 
 	 	 // Ritchie soil evaporation routine
 	 	 case 2:
 	 	 
 	 	 //Calculate the availability of soil water for use in SOILEV.
 	 	 for(int L = 0; L<=nLayers-1; L++){ 	 
 	 	 SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
 	 	 
 	 	 //Water available for soil evaporation
 	 	 sl.sw_avail = Math.max(0., sl.SWC + sl.swdeltu + sl.swdelts); 
 	 	 }
 	 	 
 	 	 SoilEvaporation_R(); 
 	 	 
 	 	 break;
 	 	 
 	 }
 	 
 	 }
 	 
 	 es = es + esm + esf;
 	 
 	 //Potential Transpiration
 	 if(fb.lai_total > 0.){ 	 
 	 	 trans();	 
 	 }else{ 	 	 
 	 	 eop = 0.; 	 	 
 	 }
 	 
 	 //Actual transpiration
 	 if(fb.lai_total > 0. && eop > 0.){
 	 	 ep = Math.min(eop, trwup * 10.);
 	 }else{
 	 	 ep = 0.;
 	 }
 	 
 	 //Actual Root Water Extraction and Transpiration constraints
 	 for(int L = 0; L<=nLayers-1; L++){
 	 
 	 	 SoilLayer sl = selectWhere((*s:SoilLayer*), (s.row == row && s.strip == strip && s.nL == (L+1)));
 	 	 
 	 	 //Water available for uptake
 	 	 sl.sw_avail = Math.max(0., sl.SWC + sl.swdeltu + sl.swdelts); 	 	
 	 
 	 } 	 
 	 RootWatUp(); 	 
}
	
	
	void initiate(int TileRow, int TileStrip){
		
		row 	= TileRow;
		strip 	= TileStrip;
		cn		= cn_runoff;
		swcon	= swcon_drain;
		nLayers	= Layer_Depth.length;
		pinf	= 0.;
		winf	= 0.;
		infilt	= 0.;
		watavl	= 0.;
		drain	= 0.;
		flood	= 0.; // no flood <--- should be at parameters
		u = slu1;
		sumes1 = 0.;
		sumes2 = 0.;
		t = 0;

		
		nRootSystemsPrevious	= 0;
		
		//Flag conditions
		puddled			= false;
		bunded			= false;
		mulchEffect		= false;
	}	
	
}