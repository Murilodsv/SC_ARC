
import static modules_organs.*;
import static modules_base.*;
import static modules_light.*;
import static updates.*;
import static parameters.*;

static void develop()
[
	
	// gemination
	// RULE:
	// MATCHING POINTER 			CONDITION					REPLACEMENT
	pb:PlantBase rh:RH s:Seed, (s.shouldGerminate(pb)) ==> pb rh r:RootSystem a:Apex
	{	/* ACTIONS REGARDING THIS REPLACEMENT*/
		r.initiate(pb);
		a.initiate(pb);
	}
	; //  <--- FINAL OF REWRITING

	
	// produce vegetative phytomer
	// RULE:
	// MATCHING POINTER 			CONDITION						
	a:Apex, 				(a.shouldProduceVegetative() == true) ==>
	//REPLACEMENT
	i:Internode	//internode criation
	[bb:BranchBase RU(35) RH(random(0,360)) aa:Apex] // branch base with a lateral apex (named aa to distinguish between apical and lateral)
	if (a.species==sunflower && (a.rank==1||a.rank==2)) ([l:Leaf] [RH(180) l2:Leaf] {l.initiate(a); l2.initiate(a);}) // if sunflower, creates 2 initial dicotiledons leaves
	else ([l:Leaf] 
		{
			l.initiate(a);			
		})		
	RH(a.species==sunflower && a.rank<=2 ? 90 : a.species==sugarcane ? random(phyllotaxis[a.species]-phyllotaxis_rdm[a.species],phyllotaxis[a.species]+phyllotaxis_rdm[a.species]) : phyllotaxis[a.species])// Rotate turtle head related to phyllotaxis
	{double inc = random(-2.5,2.5);}
	RL(inc) //inclination of new Apex
	RV(a.species==sugarcane ? -0.4:-0.4) // gravitropism power
	a	// Rewrite Apex at the top
	{
		i.initiate(a);
		bb.initiate(a);
		//su.initiate(i);
		aa.initiateAxillary(a);
		a.increment();
			
	}
	; // end of rewriting
	
		
	// produce flower
	a:Apex, (a.shouldTerminateGeneratively() == true) ==>
	i:Internode
	f:Flower
	{
		i.initiate(a);
		f.initiate(a);
	}
	;
	
	// start sucrose accumulation
	i:Internode, (i.startsucrose == true && count((* s:Sucrose, (s.rank == i.rank) *)) < 1) ==>
	i [su:Sucrose]
	{
		su.initiate(i);
			
	}
	;
	
	//shed a leaf
	l:Leaf, (l.shouldFall() == true) ==>> ; 

	// branch abortion
	bb:BranchBase, (bb.shouldFall() == true) ==>> ;
	
	// plant death
	pb:PlantBase, (pb.species == 11 && plantDeath == true && pb.die == true) ==>>;
	
	// harvest plants
	pb:PlantBase, (pb.shouldHarvest() == true) ==>>
	{
		pb.harvest();
	}
	;
	
	// ignore
	temp ==> temp;
]

