
import static modules_organs.*;
import static modules_base.*;
import static modules_light.*;
import static parameters.*;
import static environment.*;

static void renew()
[
	{
		time++;
		
		int endDOY;
		
		if (((year / 4.) - Math.floor(year / 4.)) == 0) { // is leap year?

			    endDOY = 366; }
		else {  endDOY = 365; }
		
		if(dayOfYear+1 > endDOY) {
			dayOfYear = 1;
			year++;
		}
		else
			{dayOfYear++;}
		
		updateIncomingLight();
		calcTemp();
	}
	
	// update light sources
	dr:DirectLight ::>
	{
		dr.update();
	}
	df:DiffuseLight ::>
	{
		df.update();
	}
	
	// calculate all organ ages
	o:Organ ::> 
	{
		o.calcAge();
	}
	
	
	// calculate sink strength for all growing organs
	g:GrowingOrgan ::>
	{
		g.calcSinkStrength();
	}

	// calculate light interception and photosynthesis for all visible organs
	v:VisibleOrgan ::> 
	{
		v.calcLight();
		v.calcPhytochrome();
		v.calcPhotosynthesis();
	}
	
	// accumulate organ assimilates and sink strengths for the whole plant
	pb:PlantBase ::> 
	{
		pb.calcAge();
		pb.calcSubstrates();
		pb.calcSinkStrength();
	}

	// calculate organ growth
	g:GrowingOrgan ::> 
	{
		g.calcAssimilateAllocation();
	}
	
	// calculate dimensions of visible organs
	v:VisibleOrgan ::> 
	{
		v.calcDimensions();
	}
	
	// update bud dormancy
	a:Apex ::>
	{
		a.updateDormancy();
	}
	
	// update leaf insertion angle
	l:Leaf ::>
	{
		
		l.calcSegments();
		l.calcAngle();		
		
	}
	
	
	// update plant-level variables using info from individual organs
	pb:PlantBase ::>
	{
		pb.updateAbsorbedRadiation();
		pb.updateBiomass();
		pb.updateSurfaceArea();
		pb.updateHeight();
		pb.updateBranches();
		pb.updateRfr();
		if (writePlantTable == true) {pb.updateTable();}
	}
	
	// Update live_rank leaves
	(*l:Leaf <+ i:Internode (-->)* a:Apex, (a.shouldProduceVegetative() == true && l.species == 11) *) ::>
	{		
		l.live_rank++;
		if (l.live_rank > (MaxGreenLeafNumber[l.species] - MaxDewlapNumber[l.species])) {l.dewlap = true;}
		if (l.rank <= MaxDewlapNumber[l.species]) {l.dewlap = true;}
	}	
	
	// update field-level variables
	fb:FieldBase ::>
	{
		fb.updateLai();
		fb.updateHarvest();
		fb.updateThermalTime();
		fb.updateAbsorbedRadiation();
		fb.updateBiomass();
		fb.updateYield();
		fb.getLeafNumber();
		if (writeFieldTable == true) {fb.updateTable();}
	}
	
	// calculate light on soil tiles and sensors
	ts:TileSensor ::>
	{
		ts.calcLight();
	}
	ls:LightSensor ::>
	{
		ls.calcLight();
	}
	
	// record tile and sensor light in case of plant-independent tiles
	cs:CombiSensor ::>
	{
		cs.updateTables();
	}
	
	// update TileBase light variables
	tb:TileBase ::>
	{
		tb.updateTransect(); 
	}
	
	// workaround for 3D view selection bug
	o:Organ ::> o[length] += 0;
]

static void updateLeaf()
[
	//(*Base (-->)* a:A b:B, (a.length==1.5)*)
	
	//l:Leaf ::>
	
	
]